// Package main demonstrates middleware patterns and message transformation
// This shows enterprise middleware for logging, metrics, and message enrichment
package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/kart-io/notifyhub/pkg/notifyhub"
	"github.com/kart-io/notifyhub/pkg/platforms/feishu"
	"github.com/kart-io/notifyhub/pkg/platforms/email"
)

func main() {
	fmt.Println("🔧 Middleware Patterns Demo")
	fmt.Println("===========================")
	fmt.Println()

	// Part 1: Message Transformation Middleware
	fmt.Println("🔄 Part 1: Message Transformation")
	fmt.Println("--------------------------------")

	hub, err := notifyhub.NewHub(
		feishu.WithFeishu("https://example.com/feishu/webhook"),
		email.WithEmail("smtp.example.com", 587, "notifications@company.com"),
	)
	if err != nil {
		log.Fatalf("Failed to create hub: %v", err)
	}
	defer hub.Close(context.Background())

	ctx := context.Background()

	// Message with pre-processing
	originalMsg := notifyhub.NewMessage("Raw Alert").
		WithBody("System alert occurred").
		WithMetadata("severity", "high").
		WithMetadata("service", "api-gateway").
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		Build()

	// Apply middleware transformation
	enrichedMsg := applyMessageMiddleware(originalMsg)

	if _, err := hub.Send(ctx, enrichedMsg); err != nil {
		fmt.Printf("❌ Middleware message failed: %v\n", err)
	} else {
		fmt.Printf("✅ Middleware message sent (enriched with %d metadata fields)\n",
			len(enrichedMsg.Metadata))
	}
	fmt.Println()

	// Part 2: Logging Middleware
	fmt.Println("📝 Part 2: Logging Middleware")
	fmt.Println("---------------------------")

	loggedMsg := notifyhub.NewMessage("Logged Message").
		WithBody("This message will be logged before and after sending").
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		Build()

	// Apply logging middleware
	_, err := sendWithLogging(hub, ctx, loggedMsg)
	if err != nil {
		fmt.Printf("❌ Logged message failed: %v\n", err)
	} else {
		fmt.Printf("✅ Logged message sent (check logs for details)\n")
	}
	fmt.Println()

	// Part 3: Metrics Middleware
	fmt.Println("📊 Part 3: Metrics Collection")
	fmt.Println("----------------------------")

	metricsMsg := notifyhub.NewMessage("Metrics Test").
		WithBody("This message will be measured for performance").
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		Build()

	// Apply metrics middleware
	receipt, duration, err := sendWithMetrics(hub, ctx, metricsMsg)
	if err != nil {
		fmt.Printf("❌ Metrics message failed: %v\n", err)
	} else {
		fmt.Printf("✅ Metrics message sent in %dms\n", duration.Milliseconds())
		fmt.Printf("   📊 Collected metrics: duration, success_rate, platform_performance\n")
	}
	fmt.Println()

	// Part 4: Retry Middleware
	fmt.Println("🔄 Part 4: Retry Middleware")
	fmt.Println("-------------------------")

	retryMsg := notifyhub.NewMessage("Retry Test").
		WithBody("This message uses custom retry logic").
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		Build()

	// Apply retry middleware
	receipt, err = sendWithRetry(hub, ctx, retryMsg, 3)
	if err != nil {
		fmt.Printf("❌ Retry message failed after retries: %v\n", err)
	} else {
		fmt.Printf("✅ Retry message sent successfully\n")
	}
	fmt.Println()

	// Part 5: Circuit Breaker Middleware
	fmt.Println("⚡ Part 5: Circuit Breaker Pattern")
	fmt.Println("--------------------------------")

	cbMsg := notifyhub.NewMessage("Circuit Breaker Test").
		WithBody("Protected by circuit breaker").
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		Build()

	// Apply circuit breaker
	receipt, err = sendWithCircuitBreaker(hub, ctx, cbMsg)
	if err != nil {
		fmt.Printf("❌ Circuit breaker blocked: %v\n", err)
	} else {
		fmt.Printf("✅ Circuit breaker allowed message through\n")
	}
	fmt.Println()

	// Part 6: Composable Middleware Chain
	fmt.Println("🔗 Part 6: Middleware Chain")
	fmt.Println("-------------------------")

	chainMsg := notifyhub.NewMessage("Chain Test").
		WithBody("Goes through complete middleware chain").
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		Build()

	// Create middleware chain
	chain := NewMiddlewareChain().
		Use(LoggingMiddleware).
		Use(MetricsMiddleware).
		Use(RetryMiddleware(3)).
		Use(CircuitBreakerMiddleware)

	// Execute chain
	receipt, err = chain.Execute(hub, ctx, chainMsg)
	if err != nil {
		fmt.Printf("❌ Middleware chain failed: %v\n", err)
	} else {
		fmt.Printf("✅ Middleware chain completed successfully\n")
	}
	fmt.Println()

	// Summary
	fmt.Println("🔧 Middleware Best Practices")
	fmt.Println("===========================")
	fmt.Println("✅ MESSAGE TRANSFORMATION:")
	fmt.Println("   • Enrich messages with context")
	fmt.Println("   • Add metadata and correlation IDs")
	fmt.Println("   • Transform content based on rules")
	fmt.Println()
	fmt.Println("✅ OBSERVABILITY:")
	fmt.Println("   • Log all message operations")
	fmt.Println("   • Collect performance metrics")
	fmt.Println("   • Track success/failure rates")
	fmt.Println()
	fmt.Println("✅ RELIABILITY:")
	fmt.Println("   • Implement retry strategies")
	fmt.Println("   • Use circuit breaker patterns")
	fmt.Println("   • Handle partial failures gracefully")
	fmt.Println()
	fmt.Println("✅ COMPOSABILITY:")
	fmt.Println("   • Chain multiple middleware functions")
	fmt.Println("   • Reusable middleware components")
	fmt.Println("   • Order-dependent execution")
	fmt.Println()

	fmt.Println("🔧 Middleware Patterns Demo Complete!")
}

// Message transformation middleware
func applyMessageMiddleware(msg *notifyhub.Message) *notifyhub.Message {
	// Add correlation ID
	msg.Metadata["correlation_id"] = generateCorrelationID()

	// Add timestamp
	msg.Metadata["processed_at"] = time.Now().Unix()

	// Add environment info
	msg.Metadata["environment"] = "production"
	msg.Metadata["version"] = "1.0.0"

	// Transform title based on severity
	if severity, ok := msg.Metadata["severity"].(string); ok && severity == "high" {
		msg.Title = "🚨 ALERT: " + msg.Title
	}

	// Add service context to body
	if service, ok := msg.Metadata["service"].(string); ok {
		msg.Body = fmt.Sprintf("[%s] %s", service, msg.Body)
	}

	return msg
}

// Logging middleware
func sendWithLogging(hub notifyhub.Hub, ctx context.Context, msg *notifyhub.Message) (*notifyhub.Receipt, error) {
	log.Printf("📤 Sending message: %s", msg.Title)
	log.Printf("   📋 Targets: %d", len(msg.Targets))
	log.Printf("   📊 Metadata: %v", msg.Metadata)

	start := time.Now()
	receipt, err := hub.Send(ctx, msg)
	duration := time.Since(start)

	if err != nil {
		log.Printf("❌ Message failed after %dms: %v", duration.Milliseconds(), err)
	} else {
		log.Printf("✅ Message sent after %dms", duration.Milliseconds())
		log.Printf("   📈 Results: %d success, %d failed", receipt.Successful, receipt.Failed)
	}

	return receipt, err
}

// Metrics middleware
func sendWithMetrics(hub notifyhub.Hub, ctx context.Context, msg *notifyhub.Message) (*notifyhub.Receipt, time.Duration, error) {
	start := time.Now()

	// Collect pre-send metrics
	messageSize := len(msg.Body)
	targetCount := len(msg.Targets)

	receipt, err := hub.Send(ctx, msg)
	duration := time.Since(start)

	// Collect post-send metrics
	fmt.Printf("📊 METRICS COLLECTED:\n")
	fmt.Printf("   ⏱️  Duration: %dms\n", duration.Milliseconds())
	fmt.Printf("   📏 Message size: %d bytes\n", messageSize)
	fmt.Printf("   🎯 Target count: %d\n", targetCount)

	if receipt != nil {
		fmt.Printf("   ✅ Success rate: %.1f%%\n",
			float64(receipt.Successful)/float64(receipt.Total)*100)

		// Per-platform metrics
		platformMetrics := make(map[string]int64)
		for _, result := range receipt.Results {
			if result.Success {
				platformMetrics[result.Platform] = result.Duration.Milliseconds()
			}
		}

		fmt.Printf("   🚀 Platform performance:\n")
		for platform, dur := range platformMetrics {
			fmt.Printf("      📱 %s: %dms\n", platform, dur)
		}
	}

	return receipt, duration, err
}

// Retry middleware
func sendWithRetry(hub notifyhub.Hub, ctx context.Context, msg *notifyhub.Message, maxRetries int) (*notifyhub.Receipt, error) {
	var lastErr error

	for attempt := 1; attempt <= maxRetries; attempt++ {
		fmt.Printf("🔄 Attempt %d/%d\n", attempt, maxRetries)

		receipt, err := hub.Send(ctx, msg)
		if err == nil {
			fmt.Printf("✅ Succeeded on attempt %d\n", attempt)
			return receipt, nil
		}

		lastErr = err
		fmt.Printf("❌ Attempt %d failed: %v\n", attempt, err)

		if attempt < maxRetries {
			// Exponential backoff with jitter
			delay := time.Duration(attempt*attempt) * 100 * time.Millisecond
			fmt.Printf("⏳ Waiting %dms before retry...\n", delay.Milliseconds())
			time.Sleep(delay)
		}
	}

	return nil, fmt.Errorf("all %d attempts failed, last error: %w", maxRetries, lastErr)
}

// Circuit breaker middleware
func sendWithCircuitBreaker(hub notifyhub.Hub, ctx context.Context, msg *notifyhub.Message) (*notifyhub.Receipt, error) {
	// Simple circuit breaker simulation
	if isCircuitOpen() {
		return nil, fmt.Errorf("circuit breaker is OPEN - failing fast")
	}

	fmt.Printf("⚡ Circuit breaker is CLOSED - allowing request\n")
	receipt, err := hub.Send(ctx, msg)

	if err != nil {
		recordFailure()
		fmt.Printf("⚡ Recorded failure - circuit breaker may open\n")
	} else {
		recordSuccess()
		fmt.Printf("⚡ Recorded success - circuit breaker remains closed\n")
	}

	return receipt, err
}

// Middleware chain implementation
type MiddlewareFunc func(notifyhub.Hub, context.Context, *notifyhub.Message) (*notifyhub.Receipt, error)

type MiddlewareChain struct {
	middlewares []MiddlewareFunc
}

func NewMiddlewareChain() *MiddlewareChain {
	return &MiddlewareChain{middlewares: make([]MiddlewareFunc, 0)}
}

func (c *MiddlewareChain) Use(middleware MiddlewareFunc) *MiddlewareChain {
	c.middlewares = append(c.middlewares, middleware)
	return c
}

func (c *MiddlewareChain) Execute(hub notifyhub.Hub, ctx context.Context, msg *notifyhub.Message) (*notifyhub.Receipt, error) {
	fmt.Printf("🔗 Executing middleware chain (%d middlewares)\n", len(c.middlewares))

	// Execute middlewares in sequence
	for i, middleware := range c.middlewares {
		fmt.Printf("   ⚙️  Middleware %d: executing...\n", i+1)
		receipt, err := middleware(hub, ctx, msg)
		if err != nil {
			fmt.Printf("   ❌ Middleware %d failed: %v\n", i+1, err)
			return nil, err
		}
		if receipt != nil {
			fmt.Printf("   ✅ Middleware %d completed\n", i+1)
		}
	}

	// Final send
	return hub.Send(ctx, msg)
}

// Middleware functions
func LoggingMiddleware(hub notifyhub.Hub, ctx context.Context, msg *notifyhub.Message) (*notifyhub.Receipt, error) {
	log.Printf("🔗 [MIDDLEWARE] Logging: %s", msg.Title)
	return nil, nil // Continue chain
}

func MetricsMiddleware(hub notifyhub.Hub, ctx context.Context, msg *notifyhub.Message) (*notifyhub.Receipt, error) {
	fmt.Printf("🔗 [MIDDLEWARE] Metrics: collecting data...\n")
	return nil, nil // Continue chain
}

func RetryMiddleware(retries int) MiddlewareFunc {
	return func(hub notifyhub.Hub, ctx context.Context, msg *notifyhub.Message) (*notifyhub.Receipt, error) {
		fmt.Printf("🔗 [MIDDLEWARE] Retry: configured for %d attempts\n", retries)
		return nil, nil // Continue chain
	}
}

func CircuitBreakerMiddleware(hub notifyhub.Hub, ctx context.Context, msg *notifyhub.Message) (*notifyhub.Receipt, error) {
	fmt.Printf("🔗 [MIDDLEWARE] Circuit Breaker: checking state...\n")
	return nil, nil // Continue chain
}

// Utility functions
func generateCorrelationID() string {
	return fmt.Sprintf("corr_%d", time.Now().UnixNano())
}

var circuitOpen = false
var failureCount = 0

func isCircuitOpen() bool {
	return circuitOpen
}

func recordFailure() {
	failureCount++
	if failureCount >= 3 {
		circuitOpen = true
	}
}

func recordSuccess() {
	failureCount = 0
	circuitOpen = false
}