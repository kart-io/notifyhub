version: '3.8'

services:
  # NotifyHub HTTP Service
  notifyhub-http-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - LOG_LEVEL=info
      - API_KEY=${API_KEY:-default-api-key}
      - RATE_LIMIT_PER_MINUTE=120
      - MAX_REQUEST_SIZE=2097152
      # NotifyHub Configuration
      - NOTIFYHUB_FEISHU_WEBHOOK_URL=${NOTIFYHUB_FEISHU_WEBHOOK_URL}
      - NOTIFYHUB_FEISHU_SECRET=${NOTIFYHUB_FEISHU_SECRET}
      - NOTIFYHUB_SMTP_HOST=${NOTIFYHUB_SMTP_HOST}
      - NOTIFYHUB_SMTP_PORT=${NOTIFYHUB_SMTP_PORT}
      - NOTIFYHUB_SMTP_USERNAME=${NOTIFYHUB_SMTP_USERNAME}
      - NOTIFYHUB_SMTP_PASSWORD=${NOTIFYHUB_SMTP_PASSWORD}
      - NOTIFYHUB_SMTP_FROM=${NOTIFYHUB_SMTP_FROM}
      - NOTIFYHUB_QUEUE_WORKERS=4
      - NOTIFYHUB_QUEUE_BUFFER_SIZE=1000
      - NOTIFYHUB_RETRY_MAX=3
      # Telemetry (optional)
      - NOTIFYHUB_TELEMETRY_ENABLED=false
      - NOTIFYHUB_TELEMETRY_SERVICE_NAME=notifyhub-http-service
      - NOTIFYHUB_TELEMETRY_ENVIRONMENT=docker
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - notifyhub-network

  # Redis (optional, for Redis queue backend)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - notifyhub-network
    profiles:
      - redis

  # Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - notifyhub-network
    profiles:
      - monitoring

  # Grafana (for metrics visualization)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - notifyhub-network
    profiles:
      - monitoring

  # Jaeger (for distributed tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - notifyhub-network
    profiles:
      - tracing

  # Load testing service
  load-tester:
    build:
      context: .
      dockerfile: Dockerfile.loadtest
    depends_on:
      - notifyhub-http-service
    environment:
      - TARGET_URL=http://notifyhub-http-service:8080
      - API_KEY=${API_KEY:-default-api-key}
      - CONCURRENT_USERS=10
      - REQUESTS_PER_SECOND=50
      - TEST_DURATION=60s
    networks:
      - notifyhub-network
    profiles:
      - loadtest

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  notifyhub-network:
    driver: bridge