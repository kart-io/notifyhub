// Package main demonstrates all platforms working together
// This shows the complete unified platform architecture with all supported platforms
package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/kart-io/notifyhub/pkg/notifyhub"
	"github.com/kart-io/notifyhub/pkg/platforms/feishu"
	"github.com/kart-io/notifyhub/pkg/platforms/email"
	"github.com/kart-io/notifyhub/pkg/platforms/sms"
	"github.com/kart-io/notifyhub/examples/external/discord-platform/discord"
)

func main() {
	fmt.Println("üåü Unified Platform Demo - All Platforms Together")
	fmt.Println("================================================")
	fmt.Println()
	fmt.Println("This demo showcases ALL supported platforms working together")
	fmt.Println("in the unified architecture, demonstrating true multi-platform")
	fmt.Println("messaging capabilities.")
	fmt.Println()

	// Step 1: Platform Registration Overview
	fmt.Println("üìã Step 1: Platform Registration Overview")
	fmt.Println("---------------------------------------")
	fmt.Println("Before platform imports:")
	showAvailablePlatforms()

	fmt.Println("\nAfter importing all platform packages:")
	// Note: Platforms are already registered via imports above
	showAvailablePlatforms()
	fmt.Println()

	// Step 2: Create Unified Hub
	fmt.Println("üöÄ Step 2: Creating Unified Multi-Platform Hub")
	fmt.Println("--------------------------------------------")

	hub, err := notifyhub.NewHub(
		// Built-in platform: Feishu
		feishu.WithFeishu("https://example.com/feishu/webhook",
			feishu.WithFeishuSecret("demo-secret"),
			feishu.WithFeishuTimeout(30*time.Second),
		),

		// Built-in platform: Email
		email.WithEmail("smtp.example.com", 587, "notifications@company.com",
			email.WithEmailAuth("smtp-user", "smtp-pass"),
			email.WithEmailTLS(true),
			email.WithEmailTimeout(45*time.Second),
		),

		// Built-in platform: SMS (Twilio)
		sms.WithSMSTwilio("demo-twilio-key", "+1234567890",
			sms.WithSMSTimeout(30*time.Second),
		),

		// External platform: Discord
		discord.WithDiscord("https://discord.com/api/webhooks/demo/webhook",
			discord.WithDiscordUsername("NotifyHub Bot"),
			discord.WithDiscordAvatar("https://example.com/bot-avatar.png"),
		),
	)
	if err != nil {
		log.Fatalf("‚ùå Failed to create unified hub: %v", err)
	}
	defer hub.Close(context.Background())

	fmt.Println("‚úÖ Unified hub created successfully!")
	fmt.Printf("   üì± Platforms configured: Feishu, Email, SMS, Discord\n")
	fmt.Printf("   üèóÔ∏è  Architecture: Built-in + External platforms\n")
	fmt.Printf("   üîß API: Consistent across all platforms\n")
	fmt.Println()

	ctx := context.Background()

	// Step 3: Cross-Platform Broadcasting
	fmt.Println("üì° Step 3: Cross-Platform Broadcasting")
	fmt.Println("------------------------------------")

	broadcastMsg := notifyhub.NewMessage("üåü Unified Platform Broadcast").
		WithBody("This message demonstrates the power of unified platform architecture!\n\n" +
			"‚úÖ Sent to ALL platforms:\n" +
			"‚Ä¢ Feishu - Team communication\n" +
			"‚Ä¢ Email - Stakeholder notification\n" +
			"‚Ä¢ SMS - Urgent mobile alert\n" +
			"‚Ä¢ Discord - Community update\n\n" +
			"All platforms use the same API and work seamlessly together!").
		WithMetadata("broadcast_id", "unified-demo-001").
		WithMetadata("timestamp", time.Now().Unix()).
		// Target all platforms
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		ToTarget(notifyhub.NewTarget("email", "admin@company.com", "email")).
		ToTarget(notifyhub.NewTarget("phone", "+1987654321", "sms")).
		ToTarget(notifyhub.NewTarget("webhook", "", "discord")).
		Build()

	receipt, err := hub.Send(ctx, broadcastMsg)
	if err != nil {
		log.Printf("‚ùå Broadcast failed: %v", err)
	} else {
		fmt.Printf("‚úÖ Broadcast sent to %d platforms!\n", len(receipt.Results))
		fmt.Println()
		fmt.Println("üìä Results:")
		for _, result := range receipt.Results {
			status := "‚úÖ"
			if !result.Success {
				status = "‚ùå"
			}
			fmt.Printf("   %s %s -> %s (%dms)\n",
				status, result.Platform, result.Target, result.Duration.Milliseconds())
		}
	}
	fmt.Println()

	// Step 4: Priority-Based Routing
	fmt.Println("üéØ Step 4: Priority-Based Routing")
	fmt.Println("--------------------------------")

	// Normal priority - only internal team (Feishu + Discord)
	normalMsg := notifyhub.NewMessage("üìù Regular Update").
		WithBody("Daily system health check completed. All systems operational.").
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		ToTarget(notifyhub.NewTarget("webhook", "", "discord")).
		Build()

	// High priority - team + stakeholders (Feishu + Discord + Email)
	alertMsg := notifyhub.NewAlert("‚ö†Ô∏è  System Alert").
		WithBody("Database connection pool at 85% capacity. Monitoring closely.").
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		ToTarget(notifyhub.NewTarget("webhook", "", "discord")).
		ToTarget(notifyhub.NewTarget("email", "ops@company.com", "email")).
		Build()

	// Urgent priority - ALL channels including SMS
	urgentMsg := notifyhub.NewUrgent("üö® CRITICAL: Service Down").
		WithBody("Payment gateway is completely down! Immediate action required.").
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		ToTarget(notifyhub.NewTarget("webhook", "", "discord")).
		ToTarget(notifyhub.NewTarget("email", "emergency@company.com", "email")).
		ToTarget(notifyhub.NewTarget("phone", "+1Emergency911", "sms")).
		Build()

	priorityMessages := map[string]*notifyhub.Message{
		"Normal (Team only)":      normalMsg,
		"Alert (Team + Email)":    alertMsg,
		"Urgent (All channels)":   urgentMsg,
	}

	fmt.Println("Demonstrating priority-based routing:")
	for description, msg := range priorityMessages {
		receipt, err := hub.Send(ctx, msg)
		if err != nil {
			fmt.Printf("‚ùå %s failed: %v\n", description, err)
		} else {
			fmt.Printf("‚úÖ %s sent to %d platforms (Priority: %d)\n",
				description, len(receipt.Results), msg.Priority)
		}
	}
	fmt.Println()

	// Step 5: Platform-Specific Rich Content
	fmt.Println("üé® Step 5: Platform-Specific Rich Content")
	fmt.Println("---------------------------------------")

	// Feishu with interactive card
	feishuRichMsg := notifyhub.NewMessage("Feishu Interactive Card").
		WithBody("Fallback text for non-card clients").
		WithPlatformData(map[string]interface{}{
			"feishu_card": map[string]interface{}{
				"header": map[string]interface{}{
					"title": map[string]interface{}{
						"tag":     "plain_text",
						"content": "üåü Unified Platform Status",
					},
					"template": "green",
				},
				"elements": []map[string]interface{}{
					{
						"tag": "div",
						"text": map[string]interface{}{
							"tag":     "lark_md",
							"content": "**All Platforms Online** ‚úÖ\n\n‚Ä¢ Feishu: Connected\n‚Ä¢ Email: SMTP Ready\n‚Ä¢ SMS: Twilio Active\n‚Ä¢ Discord: Webhook OK",
						},
					},
					{
						"tag": "action",
						"actions": []map[string]interface{}{
							{
								"tag": "button",
								"text": map[string]interface{}{
									"tag":     "plain_text",
									"content": "View Dashboard",
								},
								"type": "primary",
								"url":  "https://monitor.example.com",
							},
						},
					},
				},
			},
			"feishu_mention_all": true,
		}).
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		Build()

	// Email with HTML report
	emailRichMsg := notifyhub.NewMessage("üìä Platform Status Report").
		WithBody(`
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: linear-gradient(90deg, #4CAF50, #2196F3); color: white; padding: 20px; border-radius: 8px; }
        .platform { background: #f1f1f1; margin: 10px 0; padding: 15px; border-radius: 5px; }
        .status-online { color: #4CAF50; font-weight: bold; }
        .metric { display: inline-block; margin: 0 20px; }
        .footer { margin-top: 20px; padding: 10px; background: #e0e0e0; border-radius: 5px; font-size: 12px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üåü Unified Platform Status Report</h1>
        <p>Generated: ` + time.Now().Format("2006-01-02 15:04:05") + `</p>
    </div>

    <h2>Platform Status</h2>
    <div class="platform">
        <h3>üì± Feishu</h3>
        <p>Status: <span class="status-online">ONLINE</span></p>
        <div class="metric">Messages Sent: 1,247</div>
        <div class="metric">Success Rate: 99.8%</div>
        <div class="metric">Avg Response: 120ms</div>
    </div>

    <div class="platform">
        <h3>üìß Email (SMTP)</h3>
        <p>Status: <span class="status-online">ONLINE</span></p>
        <div class="metric">Messages Sent: 892</div>
        <div class="metric">Success Rate: 99.5%</div>
        <div class="metric">Avg Response: 250ms</div>
    </div>

    <div class="platform">
        <h3>üì± SMS (Twilio)</h3>
        <p>Status: <span class="status-online">ONLINE</span></p>
        <div class="metric">Messages Sent: 156</div>
        <div class="metric">Success Rate: 99.9%</div>
        <div class="metric">Avg Response: 1.2s</div>
    </div>

    <div class="platform">
        <h3>üí¨ Discord</h3>
        <p>Status: <span class="status-online">ONLINE</span></p>
        <div class="metric">Messages Sent: 543</div>
        <div class="metric">Success Rate: 99.7%</div>
        <div class="metric">Avg Response: 180ms</div>
    </div>

    <div class="footer">
        <p><strong>Summary:</strong> All platforms operating normally. Total messages processed: 2,838</p>
        <p>Next automated report: ` + time.Now().Add(24*time.Hour).Format("2006-01-02 15:04") + `</p>
    </div>
</body>
</html>
		`).
		WithFormat("html").
		WithPlatformData(map[string]interface{}{
			"email_priority": "normal",
			"email_cc":       []string{"ops@company.com", "manager@company.com"},
		}).
		ToTarget(notifyhub.NewTarget("email", "team@company.com", "email")).
		Build()

	// Discord with rich embed
	discordRichMsg := notifyhub.NewMessage("Platform Integration Success").
		WithBody("All platforms are working together seamlessly!").
		WithPlatformData(map[string]interface{}{
			"discord_embeds": []map[string]interface{}{
				{
					"title":       "üåü Unified Platform Achievement Unlocked!",
					"description": "All platforms successfully integrated and operational",
					"color":       0x00ff00, // Green
					"fields": []map[string]interface{}{
						{
							"name":   "üèóÔ∏è Architecture",
							"value":  "‚Ä¢ Built-in platforms: Feishu, Email, SMS\n‚Ä¢ External platforms: Discord\n‚Ä¢ Unified API experience",
							"inline": false,
						},
						{
							"name":   "üìä Stats",
							"value":  "‚Ä¢ 4 platforms\n‚Ä¢ 2,838 messages\n‚Ä¢ 99.7% success rate",
							"inline": true,
						},
						{
							"name":   "‚ö° Performance",
							"value":  "‚Ä¢ Avg response: 180ms\n‚Ä¢ Auto-registration\n‚Ä¢ Zero config drift",
							"inline": true,
						},
					},
					"footer": map[string]interface{}{
						"text": "Powered by NotifyHub Unified Platform Architecture",
					},
					"timestamp": time.Now().Format(time.RFC3339),
				},
			},
		}).
		ToTarget(notifyhub.NewTarget("webhook", "", "discord")).
		Build()

	// SMS with concise alert
	smsRichMsg := notifyhub.NewUrgent("Platform Status").
		WithPlatformData(map[string]interface{}{
			"sms_template": "üåü All platforms ONLINE. {{platforms}} active. Success rate: {{rate}}%. Dashboard: {{url}}",
			"sms_variables": map[string]interface{}{
				"platforms": "4",
				"rate":      "99.7",
				"url":       "bit.ly/platform-dash",
			},
		}).
		ToTarget(notifyhub.NewTarget("phone", "+1StatusCheck", "sms")).
		Build()

	// Send all rich content messages
	richMessages := map[string]*notifyhub.Message{
		"Feishu Interactive Card": feishuRichMsg,
		"Email HTML Report":       emailRichMsg,
		"Discord Rich Embed":      discordRichMsg,
		"SMS Concise Alert":       smsRichMsg,
	}

	fmt.Println("Sending platform-specific rich content:")
	for description, msg := range richMessages {
		if receipt, err := hub.Send(ctx, msg); err != nil {
			fmt.Printf("‚ùå %s failed: %v\n", description, err)
		} else {
			fmt.Printf("‚úÖ %s sent successfully\n", description)
		}
	}
	fmt.Println()

	// Step 6: Unified Configuration Patterns
	fmt.Println("üîß Step 6: Unified Configuration Patterns")
	fmt.Println("---------------------------------------")
	fmt.Println("All platforms follow the same configuration pattern:")
	fmt.Println()

	fmt.Println("// Built-in platforms")
	fmt.Println("feishu.WithFeishu(\"webhook\", feishu.WithFeishuSecret(\"secret\"))")
	fmt.Println("email.WithEmail(\"host\", 587, \"from\", email.WithEmailAuth(\"user\", \"pass\"))")
	fmt.Println("sms.WithSMSTwilio(\"key\", \"from\", sms.WithSMSTimeout(30*time.Second))")
	fmt.Println()
	fmt.Println("// External platforms")
	fmt.Println("discord.WithDiscord(\"webhook\", discord.WithDiscordUsername(\"bot\"))")
	fmt.Println()
	fmt.Println("‚úÖ Consistent patterns:")
	fmt.Println("   ‚Ä¢ Main function with required parameters")
	fmt.Println("   ‚Ä¢ Optional parameter functions")
	fmt.Println("   ‚Ä¢ Type-safe configuration")
	fmt.Println("   ‚Ä¢ Auto-registration mechanism")
	fmt.Println()

	// Step 7: Error Handling Across Platforms
	fmt.Println("üõ°Ô∏è  Step 7: Unified Error Handling")
	fmt.Println("--------------------------------")

	// Intentionally problematic message to demonstrate error handling
	problematicMsg := notifyhub.NewMessage("Error Handling Test").
		WithBody("Testing error handling across all platforms.").
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).        // Should work
		ToTarget(notifyhub.NewTarget("email", "invalid-email", "email")). // Invalid email
		ToTarget(notifyhub.NewTarget("phone", "invalid-phone", "sms")).   // Invalid phone
		ToTarget(notifyhub.NewTarget("webhook", "", "discord")).          // Should work
		Build()

	fmt.Println("Testing error handling with intentionally problematic targets:")
	receipt, err = hub.Send(ctx, problematicMsg)
	if err != nil {
		fmt.Printf("‚ùå Critical error: %v\n", err)
	} else {
		fmt.Printf("üìä Mixed results: %d successful, %d failed\n", receipt.Successful, receipt.Failed)
		fmt.Println("\nDetailed results:")
		for _, result := range receipt.Results {
			status := "‚úÖ"
			errorInfo := ""
			if !result.Success {
				status = "‚ùå"
				errorInfo = fmt.Sprintf(" (Error: %s)", result.Error)
			}
			fmt.Printf("   %s %s -> %s%s\n", status, result.Platform, result.Target, errorInfo)
		}
	}
	fmt.Println()

	// Step 8: Performance Metrics
	fmt.Println("üìà Step 8: Performance Metrics")
	fmt.Println("----------------------------")

	// Send a test message to collect performance data
	perfMsg := notifyhub.NewMessage("Performance Test").
		WithBody("Measuring performance across all platforms.").
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		ToTarget(notifyhub.NewTarget("email", "perf@company.com", "email")).
		ToTarget(notifyhub.NewTarget("phone", "+1234567890", "sms")).
		ToTarget(notifyhub.NewTarget("webhook", "", "discord")).
		Build()

	startTime := time.Now()
	receipt, err = hub.Send(ctx, perfMsg)
	totalTime := time.Since(startTime)

	if err != nil {
		fmt.Printf("‚ùå Performance test failed: %v\n", err)
	} else {
		fmt.Printf("‚úÖ Performance test completed in %dms\n", totalTime.Milliseconds())
		fmt.Println("\nPer-platform performance:")

		var totalPlatformTime time.Duration
		for _, result := range receipt.Results {
			fmt.Printf("   üì± %s: %dms\n", result.Platform, result.Duration.Milliseconds())
			totalPlatformTime += result.Duration
		}

		fmt.Printf("\nSummary:\n")
		fmt.Printf("   Total hub time: %dms\n", totalTime.Milliseconds())
		fmt.Printf("   Platform time: %dms\n", totalPlatformTime.Milliseconds())
		fmt.Printf("   Overhead: %dms\n", (totalTime - totalPlatformTime).Milliseconds())
		fmt.Printf("   Avg per platform: %dms\n", totalPlatformTime.Milliseconds()/int64(len(receipt.Results)))
	}
	fmt.Println()

	// Step 9: Architecture Summary
	fmt.Println("üèóÔ∏è  Step 9: Architecture Summary")
	fmt.Println("------------------------------")
	fmt.Println("The unified platform architecture provides:")
	fmt.Println()
	fmt.Println("‚úÖ TRUE EXTERNAL EXTENSIBILITY:")
	fmt.Println("   ‚Ä¢ Discord created without modifying core")
	fmt.Println("   ‚Ä¢ External platforms = built-in quality")
	fmt.Println("   ‚Ä¢ Community ecosystem enabled")
	fmt.Println()
	fmt.Println("‚úÖ UNIFIED DEVELOPER EXPERIENCE:")
	fmt.Println("   ‚Ä¢ Consistent API patterns")
	fmt.Println("   ‚Ä¢ Same configuration approach")
	fmt.Println("   ‚Ä¢ Unified error handling")
	fmt.Println()
	fmt.Println("‚úÖ OPERATIONAL EXCELLENCE:")
	fmt.Println("   ‚Ä¢ Auto-registration system")
	fmt.Println("   ‚Ä¢ Performance monitoring")
	fmt.Println("   ‚Ä¢ Graceful error handling")
	fmt.Println()
	fmt.Println("‚úÖ PLATFORM CAPABILITIES:")
	fmt.Println("   ‚Ä¢ Rich content per platform")
	fmt.Println("   ‚Ä¢ Platform-specific features")
	fmt.Println("   ‚Ä¢ Cross-platform broadcasting")
	fmt.Println()

	fmt.Println("üåü Unified Platform Demo Complete!")
	fmt.Println()
	fmt.Println("This demo proved that the unified architecture successfully:")
	fmt.Println("‚Ä¢ Integrates all platforms seamlessly")
	fmt.Println("‚Ä¢ Provides consistent developer experience")
	fmt.Println("‚Ä¢ Enables true external extensibility")
	fmt.Println("‚Ä¢ Maintains platform-specific rich features")
	fmt.Println("‚Ä¢ Handles errors gracefully across platforms")
	fmt.Println()
	fmt.Println("The original architecture problem is SOLVED! üéâ")
}

func showAvailablePlatforms() {
	platforms := notifyhub.GetAvailablePlatforms()
	for _, platform := range platforms {
		platformType := "Built-in"
		if platform.IsExtension {
			platformType = "External"
		}
		fmt.Printf("  üì¶ %s (%s)\n", platform.Name, platformType)
	}
}