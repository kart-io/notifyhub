# Docker Compose for Complete NotifyHub Kafka Pipeline Testing
# This sets up Kafka + gin-kafka-producer + kafka-consumer-notifier
version: '3.8'

services:
  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: notifyhub-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - notifyhub-network

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: notifyhub-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
    networks:
      - notifyhub-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI (optional, for monitoring)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: notifyhub-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: notifyhub-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - notifyhub-network

  # Gin Kafka Producer (HTTP to Kafka)
  gin-kafka-producer:
    build:
      context: ./gin-kafka-producer
      dockerfile: Dockerfile
    container_name: notifyhub-gin-producer
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      HTTP_PORT: "8080"
      KAFKA_BROKERS: "kafka:29092"
      KAFKA_TOPIC: "notifications"
      SERVICE_NAME: "gin-kafka-producer"
      SERVICE_VERSION: "1.0.0"
      GIN_MODE: "release"
    networks:
      - notifyhub-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Kafka Consumer Notifier (Kafka to NotifyHub)
  kafka-consumer-notifier:
    build:
      context: ./kafka-consumer-notifier
      dockerfile: Dockerfile
    container_name: notifyhub-kafka-consumer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: "kafka:29092"
      KAFKA_TOPIC: "notifications"
      KAFKA_CONSUMER_GROUP: "notifyhub-consumer"
      KAFKA_AUTO_OFFSET_RESET: "earliest"
      NOTIFYHUB_ENABLE_MOCK: "true"
      NOTIFYHUB_ENABLE_FEISHU: "false"
      NOTIFYHUB_ENABLE_EMAIL: "false"
      CONSUMER_WORKERS: "4"
      CONSUMER_BATCH_SIZE: "10"
      CONSUMER_PROCESSING_TIMEOUT: "30s"
      CONSUMER_RETRY_ATTEMPTS: "3"
      CONSUMER_RETRY_DELAY: "5s"
      SERVICE_NAME: "kafka-consumer-notifier"
      SERVICE_VERSION: "1.0.0"
    networks:
      - notifyhub-network
    restart: unless-stopped

  # Load Testing Tool (optional)
  load-tester:
    image: alpine/curl:latest
    container_name: notifyhub-load-tester
    depends_on:
      gin-kafka-producer:
        condition: service_healthy
    networks:
      - notifyhub-network
    command: >
      sh -c "
        echo 'Waiting for services to be ready...';
        sleep 30;
        echo 'Starting load test...';
        for i in $$(seq 1 10); do
          echo 'Sending test message $$i...';
          curl -X POST http://gin-kafka-producer:8080/api/v1/notifications \
            -H 'Content-Type: application/json' \
            -d '{
              \"title\": \"Load Test Message $$i\",
              \"body\": \"This is test message number $$i from load tester\",
              \"priority\": 3,
              \"targets\": [
                {\"type\": \"email\", \"value\": \"test$$i@example.com\"}
              ],
              \"variables\": {
                \"test_id\": \"$$i\",
                \"timestamp\": \"$$(date -Iseconds)\"
              }
            }';
          echo '';
          sleep 2;
        done;
        echo 'Load test completed!';
        sleep infinity;
      "
    profiles:
      - testing

networks:
  notifyhub-network:
    driver: bridge

volumes:
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local