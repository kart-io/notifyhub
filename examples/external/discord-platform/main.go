// Package main demonstrates creating external platform packages
// This shows how external developers can create platform packages without modifying core code
package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/kart-io/notifyhub/examples/external/discord-platform/discord" // External platform
	"github.com/kart-io/notifyhub/pkg/notifyhub"
	"github.com/kart-io/notifyhub/pkg/platforms/feishu" // Built-in platform
)

func main() {
	fmt.Println("üåü External Platform Development Demo")
	fmt.Println("===================================")
	fmt.Println()
	fmt.Println("This demo shows how to create external platform packages")
	fmt.Println("that integrate seamlessly with NotifyHub's unified architecture.")
	fmt.Println()

	// Step 1: Show platform registration
	fmt.Println("üìã Step 1: Platform Registration")
	fmt.Println("------------------------------")
	fmt.Println("Before importing external platform:")
	showAvailablePlatforms()

	// The import above already registered Discord via its init() function
	fmt.Println("\nAfter importing external Discord platform:")
	showAvailablePlatforms()
	fmt.Println()

	// Step 2: Create hub with mixed platforms
	fmt.Println("üöÄ Step 2: Mixed Platform Hub")
	fmt.Println("---------------------------")

	hub, err := notifyhub.New(
		// Built-in platform (Feishu)
		feishu.WithFeishu("https://example.com/feishu/webhook",
			feishu.WithFeishuSecret("demo-secret"),
		),

		// External platform (Discord) - same API quality!
		discord.WithDiscord("https://discord.com/api/webhooks/demo/webhook",
			discord.WithDiscordUsername("NotifyHub Bot"),
			discord.WithDiscordAvatar("https://example.com/bot-avatar.png"),
			discord.WithDiscordTimeout(30*time.Second),
		),
	)
	if err != nil {
		log.Fatalf("‚ùå Failed to create hub: %v", err)
	}
	defer func() { _ = hub.Close() }()

	fmt.Println("‚úÖ Hub created with both built-in and external platforms!")
	fmt.Printf("   üì± Feishu: Built-in platform\n")
	fmt.Printf("   üì± Discord: External platform (same API quality!)\n")
	fmt.Println()

	ctx := context.Background()

	// Step 3: Send to both platforms
	fmt.Println("üì§ Step 3: Multi-Platform Messaging")
	fmt.Println("---------------------------------")

	basicMsg := notifyhub.NewMessage("External Platform Success!").
		WithBody("üéâ This message is sent to both built-in and external platforms:\n" +
			"‚Ä¢ Feishu (built-in platform)\n" +
			"‚Ä¢ Discord (external platform)\n\n" +
			"Both have the same API quality and developer experience!").
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		ToTarget(notifyhub.NewTarget("webhook", "", "discord")).
		Build()

	receipt, err := hub.Send(ctx, basicMsg)
	if err != nil {
		log.Printf("‚ùå Basic message failed: %v", err)
	} else {
		fmt.Printf("‚úÖ Message sent to %d platforms!\n", len(receipt.Results))
		for _, result := range receipt.Results {
			status := "‚úÖ"
			if !result.Success {
				status = "‚ùå"
			}
			fmt.Printf("   %s %s (%dms)\n", status, result.Platform, result.Duration.Milliseconds())
		}
	}
	fmt.Println()

	// Step 4: Platform-specific features
	fmt.Println("üé® Step 4: Platform-Specific Features")
	fmt.Println("-----------------------------------")

	// Discord with rich embeds
	discordRichMsg := notifyhub.NewAlert("Discord Rich Content").
		WithBody("This message showcases Discord-specific embeds.").
		WithPlatformData(map[string]interface{}{
			"discord_embeds": []map[string]interface{}{
				{
					"title":       "üåü External Platform Success!",
					"description": "Discord platform created completely outside the core library",
					"color":       0x7289da, // Discord blurple
					"fields": []map[string]interface{}{
						{
							"name":   "‚ú® Benefits",
							"value":  "‚Ä¢ No core library changes\n‚Ä¢ Independent development\n‚Ä¢ Full feature parity",
							"inline": true,
						},
						{
							"name":   "üöÄ Features",
							"value":  "‚Ä¢ Auto-registration\n‚Ä¢ Type-safe config\n‚Ä¢ Rich embeds",
							"inline": true,
						},
					},
					"footer": map[string]interface{}{
						"text": "Generated by NotifyHub External Platform",
					},
					"timestamp": time.Now().Format(time.RFC3339),
				},
			},
		}).
		ToTarget(notifyhub.NewTarget("webhook", "", "discord")).
		Build()

	// Feishu with mentions
	feishuRichMsg := notifyhub.NewAlert("Feishu Team Alert").
		WithBody("External platform integration completed successfully!").
		WithPlatformData(map[string]interface{}{
			"feishu_mention_all": true,
		}).
		ToTarget(notifyhub.NewTarget("webhook", "", "feishu")).
		Build()

	// Send platform-specific messages
	platformMessages := map[string]*notifyhub.Message{
		"Discord Rich Embeds": discordRichMsg,
		"Feishu Team Alert":   feishuRichMsg,
	}

	for description, msg := range platformMessages {
		if _, err := hub.Send(ctx, msg); err != nil {
			fmt.Printf("‚ùå %s failed: %v\n", description, err)
		} else {
			fmt.Printf("‚úÖ %s sent successfully\n", description)
		}
	}
	fmt.Println()

	// Step 5: Demonstrate API consistency
	fmt.Println("üîß Step 5: API Consistency Demo")
	fmt.Println("-----------------------------")
	fmt.Println("Both platforms use identical configuration patterns:")
	fmt.Println()

	fmt.Println("Built-in Feishu:")
	fmt.Println(`  feishu.WithFeishu("webhook",
      feishu.WithFeishuSecret("secret"),
      feishu.WithFeishuTimeout(30*time.Second),
  )`)
	fmt.Println()

	fmt.Println("External Discord:")
	fmt.Println(`  discord.WithDiscord("webhook",
      discord.WithDiscordUsername("bot"),
      discord.WithDiscordTimeout(30*time.Second),
  )`)
	fmt.Println()

	fmt.Println("‚úÖ Same patterns:")
	fmt.Println("   ‚Ä¢ Main function with URL parameter")
	fmt.Println("   ‚Ä¢ Optional parameter functions")
	fmt.Println("   ‚Ä¢ Consistent naming conventions")
	fmt.Println("   ‚Ä¢ Type-safe configuration")
	fmt.Println()

	// Step 6: Development benefits
	fmt.Println("üí° Step 6: External Development Benefits")
	fmt.Println("--------------------------------------")
	fmt.Println("‚úÖ NO CORE LIBRARY CHANGES:")
	fmt.Println("   ‚Ä¢ External developers work independently")
	fmt.Println("   ‚Ä¢ No need to fork or modify NotifyHub")
	fmt.Println("   ‚Ä¢ Faster development and deployment")
	fmt.Println()
	fmt.Println("‚úÖ SAME API QUALITY:")
	fmt.Println("   ‚Ä¢ External platforms are first-class citizens")
	fmt.Println("   ‚Ä¢ Same convenience functions as built-in platforms")
	fmt.Println("   ‚Ä¢ Consistent error handling and responses")
	fmt.Println()
	fmt.Println("‚úÖ AUTO-REGISTRATION:")
	fmt.Println("   ‚Ä¢ Platforms register themselves when imported")
	fmt.Println("   ‚Ä¢ No manual configuration needed")
	fmt.Println("   ‚Ä¢ Eliminates dependency injection complexity")
	fmt.Println()
	fmt.Println("‚úÖ ECOSYSTEM GROWTH:")
	fmt.Println("   ‚Ä¢ Community can contribute platform packages")
	fmt.Println("   ‚Ä¢ Specialized platforms for niche use cases")
	fmt.Println("   ‚Ä¢ Independent versioning and maintenance")
	fmt.Println()

	// Step 7: Package structure guide
	fmt.Println("üìÅ Step 7: External Package Structure")
	fmt.Println("-----------------------------------")
	fmt.Println("To create your own external platform:")
	fmt.Println()
	fmt.Println("1. Create package structure:")
	fmt.Println("   yourorg/notifyhub-myplatform/")
	fmt.Println("   ‚îú‚îÄ‚îÄ sender.go    # ExternalSender implementation")
	fmt.Println("   ‚îú‚îÄ‚îÄ options.go   # Convenience functions")
	fmt.Println("   ‚îî‚îÄ‚îÄ README.md    # Usage documentation")
	fmt.Println()
	fmt.Println("2. Implement ExternalSender interface:")
	fmt.Println("   ‚Ä¢ Name() string")
	fmt.Println("   ‚Ä¢ Send(ctx, msg, targets) ([]*SendResult, error)")
	fmt.Println("   ‚Ä¢ ValidateTarget(target) error")
	fmt.Println("   ‚Ä¢ GetCapabilities() Capabilities")
	fmt.Println("   ‚Ä¢ IsHealthy(ctx) error")
	fmt.Println("   ‚Ä¢ Close() error")
	fmt.Println()
	fmt.Println("3. Create convenience functions:")
	fmt.Println("   ‚Ä¢ WithMyPlatform(url, ...options)")
	fmt.Println("   ‚Ä¢ WithMyPlatformOption(value) func(map[string]interface{})")
	fmt.Println("   ‚Ä¢ Auto-registration with sync.Once")
	fmt.Println()

	fmt.Println("üåü External Platform Demo Complete!")
	fmt.Println()
	fmt.Println("Key Achievements:")
	fmt.Println("‚Ä¢ Created Discord platform without modifying core code")
	fmt.Println("‚Ä¢ Achieved same API quality as built-in platforms")
	fmt.Println("‚Ä¢ Demonstrated true external extensibility")
	fmt.Println("‚Ä¢ Maintained consistent developer experience")
	fmt.Println()
	fmt.Println("This architecture enables a rich ecosystem of community")
	fmt.Println("platforms while maintaining excellent developer experience!")
}

func showAvailablePlatforms() {
	platforms := notifyhub.GetAvailablePlatforms()
	for _, platform := range platforms {
		platformType := "Built-in"
		if platform.IsExtension {
			platformType = "External"
		}
		fmt.Printf("  üì¶ %s (%s)\n", platform.Name, platformType)
	}
}
