# NotifyHub v3.0.0 Production CI/CD Pipeline
# Comprehensive pipeline with testing, building, and deployment automation

name: Production Deployment Pipeline

on:
  push:
    branches:
      - main
      - master
    tags:
      - "v*"
  pull_request:
    branches:
      - main
      - master

env:
  GO_VERSION: "1.24"
  REGISTRY: ghcr.io
  IMAGE_NAME: notifyhub
  NAMESPACE: notifyhub-production

jobs:
  # Static Analysis and Testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Run benchmarks
        run: |
          echo "=== ML Routing Benchmarks ==="
          go test -bench=. -benchmem ./pkg/core/routing/
          echo "=== Configuration Benchmarks ==="
          go test -bench=. -benchmem ./pkg/config/
          echo "=== Monitoring Benchmarks ==="
          go test -bench=. -benchmem ./pkg/monitoring/
          echo "=== Integration Benchmarks ==="
          go test -bench=. -benchmem ./comprehensive_integration_test.go

      - name: Static analysis
        run: |
          go vet ./...
          go fmt -d .
          golangci-lint run --timeout 5m
        continue-on-error: true

      - name: Security scan
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: ./...
        continue-on-error: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html

  # Build and Push Container Image
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=v3.0.0,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://notifyhub-staging.company.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}

      - name: Deploy to staging
        run: |
          # Update image tag in deployment
          sed -i "s|image: notifyhub:v3.0.0|image: ${{ needs.build.outputs.image-tag }}|g" k8s/deployment.yaml

          # Deploy to staging namespace
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/service-account.yaml
          kubectl apply -f k8s/persistent-volume.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

          # Wait for deployment
          kubectl rollout status deployment/notifyhub -n notifyhub-staging --timeout=300s

      - name: Run staging validation
        run: |
          chmod +x scripts/validate-deployment.sh
          NAMESPACE=notifyhub-staging scripts/validate-deployment.sh quick

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://notifyhub.company.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Pre-deployment validation
        run: |
          # Ensure we're deploying a tagged version
          if [[ ! "${GITHUB_REF}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Production deployment requires a semantic version tag"
            exit 1
          fi
          echo "‚úÖ Deploying version: ${GITHUB_REF#refs/tags/}"

      - name: Deploy to production
        run: |
          # Use deployment script for production
          chmod +x k8s/deploy.sh
          cd k8s && ./deploy.sh deploy

      - name: Post-deployment validation
        run: |
          chmod +x scripts/validate-deployment.sh
          scripts/validate-deployment.sh full

      - name: Performance validation
        run: |
          # Run comprehensive performance tests
          go test -v ./comprehensive_integration_test.go
          scripts/validate-deployment.sh performance

      - name: Create deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#platform-deployments"
          text: |
            üöÄ NotifyHub v3.0.0 Production Deployment
            Version: ${{ github.ref_name }}
            Status: ${{ job.status == 'success' && '‚úÖ SUCCESS' || '‚ùå FAILED' }}

            Features Deployed:
            ‚Ä¢ ML-based routing (756K ops/sec)
            ‚Ä¢ Hot-reload configuration (2.8M ops/sec)
            ‚Ä¢ Enhanced monitoring & alerting
            ‚Ä¢ Cloud-native Kubernetes deployment
            ‚Ä¢ OpenTelemetry observability

            Dashboard: https://grafana.company.com/d/notifyhub-v3
            Metrics: https://prometheus.company.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  # Rollback capability
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production-rollback
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/notifyhub -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/notifyhub -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Validate rollback
        run: |
          chmod +x scripts/validate-deployment.sh
          scripts/validate-deployment.sh quick

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: "warning"
          channel: "#platform-alerts"
          text: |
            ‚ö†Ô∏è NotifyHub Production Rollback Completed
            Previous version restored successfully
            Please investigate deployment issues
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
