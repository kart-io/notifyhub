name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.22'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run integration tests
      run: go test -v -race -tags=integration ./...

  examples:
    name: Test Examples
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-examples-${{ hashFiles('**/go.sum') }}

    - name: Test examples
      run: |
        cd examples
        if [ -f "test_runner.sh" ]; then
          chmod +x test_runner.sh
          ./test_runner.sh --unit-only
        fi

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-e2e-${{ hashFiles('**/go.sum') }}

    - name: Run E2E tests
      run: go test -v -run="TestE2ESuite" -timeout=15m .

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-perf-${{ hashFiles('**/go.sum') }}

    - name: Run performance tests
      run: go test -v -bench=. -benchmem -timeout=30m -run=^$ .

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Check out code
      uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Check out code
      uses: actions/checkout@v4

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Check out code
      uses: actions/checkout@v4

    - name: Build
      run: go build -v ./...

    - name: Build examples
      run: |
        cd examples/gin-kafka-producer && go build -v .
        cd ../kafka-consumer-notifier && go build -v .