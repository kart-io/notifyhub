package template

import (
	"context"
	"log"
	"time"

	"github.com/kart-io/notifyhub/client"
	"github.com/kart-io/notifyhub/config"
	"github.com/kart-io/notifyhub/notifiers"
)

// ExampleUsage demonstrates how to use the template system with HTTP fetching
func ExampleUsage() {
	// 1. 创建模板引擎
	engine := NewEngine()

	// 2. 添加自定义本地模板
	customAlertTemplate := `🔥 CRITICAL ALERT: {{.title | upper}}

📍 **Location**: {{.location | default "Unknown"}}
⚠️  **Issue**: {{.issue}}
🕐 **Time**: {{.timestamp | formatTime "2006-01-02 15:04:05"}}

{{if .metrics}}
📊 **Current Metrics**:
{{range $name, $value := .metrics}}
- {{$name}}: {{$value}}
{{end}}
{{end}}

{{if .actions}}
🛠️  **Recommended Actions**:
{{range .actions}}
- {{.}}
{{end}}
{{end}}

---
🤖 Auto-generated by NotifyHub at {{now | formatTime "15:04:05"}}`

	// 添加本地自定义模板
	err := engine.AddTextTemplate("critical_alert", customAlertTemplate)
	if err != nil {
		log.Fatal("Failed to add template:", err)
	}

	// 3. 从HTTP URL加载远程模板
	// 示例：从GitHub加载模板
	err = engine.LoadTemplateFromURL(
		"github_alert",
		"https://raw.githubusercontent.com/example/templates/main/alert.tmpl",
		notifiers.FormatText,
		map[string]string{
			"Authorization": "token YOUR_TOKEN", // 如果需要认证
			"User-Agent":    "NotifyHub/1.0",
		},
	)
	if err != nil {
		log.Printf("Failed to load remote template: %v", err)
		// 继续执行，不中断程序
	}

	// 4. 从企业内部API加载模板
	err = engine.LoadTemplateFromURL(
		"company_alert",
		"https://internal-api.company.com/templates/alert",
		notifiers.FormatText,
		map[string]string{
			"X-API-Key": "your-internal-api-key",
		},
	)
	if err != nil {
		log.Printf("Failed to load company template: %v", err)
	}

	// 5. 在NotifyHub中使用模板引擎
	hub, err := client.New(
		config.WithFeishu("webhook-url", "secret"),
		config.WithTestDefaults(),
		// 注意：需要扩展config包支持自定义模板引擎
	)
	if err != nil {
		log.Fatal("Failed to create hub:", err)
	}

	ctx := context.Background()
	if err := hub.Start(ctx); err != nil {
		log.Fatal("Failed to start hub:", err)
	}
	defer hub.Stop()

	// 6. 发送使用本地自定义模板的消息
	message := &notifiers.Message{
		Template: "critical_alert",
		Variables: map[string]interface{}{
			"title":     "Database Connection Lost",
			"location":  "Production Server #3",
			"issue":     "PostgreSQL database is not responding",
			"timestamp": time.Now(),
			"metrics": map[string]interface{}{
				"connection_attempts": 15,
				"last_success":        "2024-09-14 14:20:15",
				"error_rate":          "100%",
			},
			"actions": []string{
				"Check database server status",
				"Verify network connectivity",
				"Review database logs",
				"Contact database administrator",
			},
		},
		Targets: []notifiers.Target{
			{Type: notifiers.TargetTypeUser, Value: "admin", Platform: "feishu"},
		},
	}

	results, err := hub.Send(ctx, message, nil)
	if err != nil {
		log.Printf("Failed to send message: %v", err)
	} else {
		log.Printf("Message sent successfully: %d results", len(results))
	}

	// 7. 发送使用远程模板的消息
	if len(engine.GetAvailableTemplates()) > 3 { // 检查是否成功加载了远程模板
		remoteMessage := &notifiers.Message{
			Template: "github_alert", // 使用从GitHub加载的模板
			Variables: map[string]interface{}{
				"service": "Payment Gateway",
				"status":  "DOWN",
				"region":  "us-east-1",
			},
			Targets: []notifiers.Target{
				{Type: notifiers.TargetTypeUser, Value: "ops-team", Platform: "feishu"},
			},
		}

		results, err = hub.Send(ctx, remoteMessage, nil)
		if err != nil {
			log.Printf("Failed to send remote template message: %v", err)
		} else {
			log.Printf("Remote template message sent successfully: %d results", len(results))
		}
	}
}

// HTTPFetchExample demonstrates HTTP template fetching scenarios
func HTTPFetchExample() {
	engine := NewEngine()

	// 场景1：从公共GitHub仓库加载模板
	err := engine.LoadTemplateFromURL(
		"github_public",
		"https://raw.githubusercontent.com/company/templates/main/alert.tmpl",
		notifiers.FormatText,
		nil, // 公共仓库不需要认证
	)
	if err != nil {
		log.Printf("Failed to load public GitHub template: %v", err)
	}

	// 场景2：从私有GitHub仓库加载模板（需要token）
	err = engine.LoadTemplateFromURL(
		"github_private",
		"https://raw.githubusercontent.com/company/private-templates/main/security-alert.tmpl",
		notifiers.FormatText,
		map[string]string{
			"Authorization": "token ghp_xxxxxxxxxxxx",
			"User-Agent":    "NotifyHub/1.0",
		},
	)
	if err != nil {
		log.Printf("Failed to load private GitHub template: %v", err)
	}

	// 场景3：从企业内部模板服务器加载
	err = engine.LoadTemplateFromURL(
		"internal_alert",
		"https://templates.company.internal/api/v1/templates/alert",
		notifiers.FormatHTML,
		map[string]string{
			"X-API-Key":    "internal-api-key-123",
			"Content-Type": "application/json",
		},
	)
	if err != nil {
		log.Printf("Failed to load internal template: %v", err)
	}

	// 场景4：从CDN加载模板
	err = engine.LoadTemplateFromURL(
		"cdn_template",
		"https://cdn.company.com/templates/notification.tmpl",
		notifiers.FormatText,
		map[string]string{
			"Cache-Control": "no-cache",
		},
	)
	if err != nil {
		log.Printf("Failed to load CDN template: %v", err)
	}

	log.Printf("Available templates after HTTP loading: %v", engine.GetAvailableTemplates())
}

// Advanced template examples
var AdvancedTemplateExamples = map[string]string{
	"slack_webhook": `{
    "text": "{{.title}}",
    "blocks": [
        {
            "type": "header",
            "text": {
                "type": "plain_text",
                "text": "{{.title | upper}}"
            }
        },
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "{{.body}}"
            }
        }{{if .fields}},
        {
            "type": "section",
            "fields": [
                {{range $key, $value := .fields}}
                {
                    "type": "mrkdwn",
                    "text": "*{{$key}}:*\n{{$value}}"
                }{{if not (eq $key (lastKey $.fields))}},{{end}}
                {{end}}
            ]
        }{{end}}
    ]
}`,

	"email_html": `<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>{{.title}}</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
        .alert { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .info-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        .info-table th, .info-table td { padding: 10px; border: 1px solid #ddd; text-align: left; }
        .info-table th { background: #f8f9fa; }
        .footer { font-size: 12px; color: #666; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h2>{{.title}}</h2>
            <p><strong>Time:</strong> {{.timestamp | formatTime "2006-01-02 15:04:05"}}</p>
        </div>

        <div class="alert">
            {{.body}}
        </div>

        {{if .details}}
        <table class="info-table">
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                {{range $key, $value := .details}}
                <tr>
                    <td>{{$key | title}}</td>
                    <td>{{$value}}</td>
                </tr>
                {{end}}
            </tbody>
        </table>
        {{end}}

        <div class="footer">
            <p>This message was sent by NotifyHub automated system.</p>
            <p>If you have any questions, please contact your system administrator.</p>
        </div>
    </div>
</body>
</html>`,

	"metrics_report": `📊 **{{.report_name | upper}}**
Generated: {{.timestamp | formatTime "2006-01-02 15:04:05"}}

{{if .summary}}
## 📋 Summary
{{.summary}}
{{end}}

## 📈 Metrics
{{range .metrics}}
**{{.name}}**: {{.value}}{{if .unit}} {{.unit}}{{end}}{{if .trend}} ({{.trend}}){{end}}
{{if .description}}_{{.description}}_{{end}}

{{end}}

{{if .alerts}}
## ⚠️ Alerts
{{range .alerts}}
- **{{.level | upper}}**: {{.message}}
  {{if .details}}_Details: {{.details}}_{{end}}
{{end}}
{{end}}

{{if .actions}}
## 🎯 Recommended Actions
{{range .actions}}
- {{.}}
{{end}}
{{end}}

---
📍 Environment: {{.environment | upper}}
🏷️ Tags: {{.tags | join ", "}}`,
}

// ExampleIntegration shows how to integrate with NotifyHub
func ExampleIntegration() {
	// This would be added to the Hub struct
	fmt.Println("Integration example - would need Hub struct modification")

	// Example of how it would work:
	/*
	type Hub struct {
		// ... existing fields
		templateEngine *template.EnhancedEngine
	}

	func (h *Hub) SetTemplateEngine(engine *template.EnhancedEngine) {
		h.templateEngine = engine
	}

	func (h *Hub) RenderMessage(message *notifiers.Message) (*notifiers.Message, error) {
		if h.templateEngine != nil {
			return h.templateEngine.RenderMessage(message)
		}
		return message, nil
	}
	*/
}